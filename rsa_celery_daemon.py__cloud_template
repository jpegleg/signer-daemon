# This is a reference file/template for editing for another use case.
# Do not try to use this file as is.

import redis
import binascii

from celery import Celery
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_PSS

app = Celery(
    'celeryRsa',
    broker='redis://cloudproviderexample:6379/0',
    backend='redis://cloudproviderexample:6379/0'
)
app.conf.update(
    security_key='files/celeryRsa.key',
    security_certificate='files/celeryRsa.pem',
    security_cert_store='files/*.pem',
    task_serializer='auth',
    event_serializer='auth',
    accept_content=['auth'],
    result_accept_content=['json']
)
app.setup_security()

@app.task
def rsatn(message_in):
    r = redis.StrictRedis(host='cloudproviderexample', port=6379, db=0)
    f = open('rsa.pem','r')
    keyPair = RSA.import_key(f.read())
    hash = SHA256.new(message_in)
    signer = PKCS1_PSS.new(keyPair)
    signature = signer.sign(hash)
    r.mset({binascii.hexlify(signature): message_in})
    print("Signature:", binascii.hexlify(signature))
    return(message_in, binascii.hexlify(signature))
def rsavf(message_in):
    r = redis.StrictRedis(host='cloudproviderexample', port=6379, db=0)
    f = open('rsa.pem','r')
    keyPair = RSA.import_key(f.read())
    message = r.get(message_in)
    hash = SHA256.new(message)
    signer = PKCS1_PSS.new(keyPair)
    signature = binascii.unhexlify(message_in)
    print("Verification of string:",  message)
    try:
      velidate = signer.verify(hash, signature)
      return('Valid signature.')
    except Exception as error:
      print('ERROR: ', error)
      return('No match for signature.')

if __name__ == '__main__':
    app.start()
